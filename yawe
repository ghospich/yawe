#!/usr/bin/env bash

DEBUG=0
FFMPEG_BIN="$(which ffmpeg)"
MKVMERGE_BIN="$(which mkvmerge)"
LC_NUMERIC=C # WTF, JUST WTF

canonize_name() {
    local name
    name="$(basename "$1" | rev | cut -d"." -f2- | rev)"
    tr -c '[:alnum:]' ' ' <<< "$name" | xargs echo -n | tr ' ' '-'  | tr '[:upper:]' '[:lower:]'
}

create_filename() {
    local lss
    local lt
    lss=$(bc <<< "scale=0; $1 / 1")
    lt=$(bc <<< "scale=0; $2 / 1")
    echo "from-${lss}s-length-${lt}s"
}

filename_extension() {
    basename "$1" | rev | cut -d"." -f1 | rev
}

time_to_seconds() {
    if egrep -q '.*:.*:.*' <<< "$1"; then
        awk -F":" '{ print $1" * 3600 + "$2" * 60 + "$3 }' <<< "$1" | bc
    elif egrep -q '.*:.*' <<< "$1"; then
        awk -F":" '{ print $1" * 60 + "$2 }' <<< "$1" | bc
    else
        printf "%.3f" "$1" 2> /dev/null
    fi
}

seconds_to_time() {
    local all
    local ms
    local seconds
    local minutes
    local hours
    all=$(printf "%.3f" "$1" 2> /dev/null)
    ms=$(bc <<< "scale=0; $all * 1000 % 1000 / 1")
    seconds=$(bc <<< "scale=0; $all % 60 / 1")
    minutes=$(bc <<< "scale=3; tmp=$all / 60; scale=0; tmp % 60 / 1")
    hours=$(bc <<< "scale=3; tmp=$all / 3600; scale=0; tmp / 1")
    printf "%02d:%02d:%02d.%03d" $hours $minutes $seconds $ms
}

stderr() {
    echo "$@" 1>&2
}

error() {
    echo -e "\033[01m\033[38;05;1m${*}\033[m"
}

warn() {
    echo -e "\033[01m\033[38;05;3m${*}\033[m"
}

info() {
    echo -e "\033[01m\033[38;05;4m${*}\033[m"
}

debug() {
    if [[ -z "$TDIR" ]]; then
        error "Can't show debug info due to TDIR not initialized."
    else
        DBG_BIN="$1"
        shift 1
        ln -sf "$(type -P true)" "$TDIR/$DBG_BIN"
        echo -e "\033[01m\033[38;05;4m"
        (PATH="$TDIR:$PATH"; set -x; "$DBG_BIN" "$@")
        echo -e "\033[m"
    fi
}

usage() {
    cmdname="$(basename "$(readlink -f "$(command -v "$0")")")"

    stderr "Usage: $cmdname -ss <number> -t <number> [OPTIONS] FILE "
    stderr "Yet another webm encoder."
    stderr "Webm wrapper for easier webm creating. Use it wisely. And easy."
    stderr "vp8, vp9, vorbis and opus supported. By default, vp8 and opus enabled. "
    stderr
    stderr "Optional options: "
    stderr "  -lag-in-frames <number> "
    stderr "  -auto-alt-ref <number> "
    stderr "  -width <number> "
    stderr "  -ac <number> "
    stderr "  -slices <number> "
    stderr "  -quality <string> "
    stderr "  -vp8 "
    stderr "  -vp9 "
    stderr "  -vorbis "
    stderr "  -opus "
    stderr "  -ba <number>k "
    stderr "  -qa <number> "
    stderr
    stderr "List is incomplete. See more in source code. "
    exit 1
}

__ffmpeg() {
    debug "ffmpeg" "$@"
    if [[ $DEBUG -eq 0 ]]; then
        "$FFMPEG_BIN" "$@"
    fi
}
__mkvmerge() {
    debug "mkvmerge" "$@"
    if [[ $DEBUG -eq 0 ]]; then
        "$MKVMERGE_BIN" "$@"
    fi
}

# predefined stuff

lagInFrames=16 # more lagInFrames = more quality
autoAltRef=1
width=640
size=6144
ac=1 # there is bug in firefox with 1 audio channel on vorbis
slices=8  # more slices = more quality
quality=best
vcodec=libvpx # vp9 is slow on my machine
acodec=libopus # opus is pretty cool guy
ba=48k # audio bitrate (opus only)
qa=7 # audio quality (vorbis only)

crf=""
preset="slower"
tune=""
dumb=0
twopass=1

fpsarg=""
subs=off
aid=1
sid=1
outext="webm"

source "$(dirname "$(readlink -f "$(command -v "$0")")")/yawe.config"

while true ; do
    case "$1" in
        -ss)
            ss="$2"
            shift 2
            ;;
        -t)
            t="$2"
            shift 2
            ;;
        -lag-in-frames)
            lagInFrames="$2"
            shift 2
            ;;
        -auto-alt-ref)
            autoAltRef="$2"
            shift 2
            ;;
        -width)
            width="$2"
            shift 2
            ;;
        -size)
            size="$2"
            shift 2
            ;;
        -ac)
            ac="$2"
            shift 2
            ;;
        -slices)
            slices="$2"
            shift 2
            ;;
        -quality)
            quality="$2"
            shift 2
            ;;
        -vp8)
            vcodec="libvpx"
            shift
            ;;
        -vp8)
            vcodec="libvpx-vp9"
            shift
            ;;
        -h264)
            vcodec="libx264"
            shift
            ;;
        -vorbis)
            acodec="libvorbis"
            shift
            ;;
        -opus)
            acodec="libopus"
            shift
            ;;
        -ba)
            ba="$2"
            shift 2
            ;;
        -qa)
            qa="$2"
            shift 2
            ;;
        -crf)
            crf="$2"
            shift 2
            ;;
        -preset)
            preset="$2"
            shift 2
            ;;
        -tune)
            tune="$2"
            shift 2
            ;;
        -dumb)
            dumb=1
            shift
            ;;
        -fps)
            fpsarg=",fps=$2"
            shift 2
            ;;
        -subs)
            subs="$2"
            shift 2
            ;;
        -aid)
            aid="$2"
            shift 2
            ;;
        -sid)
            sid="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            break
            ;;
    esac
done


file="$1"

[[ ! -z "$2" || -z "$ss" || -z "$t" || ! -e "$file" ]] && usage

ss=$(time_to_seconds "$ss")
t=$(time_to_seconds "$t")
se=$(bc <<< "scale=3; $ss + $t")

voptions=()
early_voptions=()
if [[ "$vcodec" = "libvpx" ]]; then
    voptions+=(-slices "$slices")
    voptions+=(-quality "$quality")
    voptions+=(-auto-alt-ref "$autoAltRef")
    voptions+=(-lag-in-frames "$lagInFrames")

    if [[ ! -z $crf || ! -z $preset || ! -z $tine || ! -z $dumb ]]; then
        error "This option does't supported with vpx"
        exit 1
    fi

elif [[ "$vcodec" = "libvpx-vp9" ]]; then
    voptions+=(-slices "$slices")
    voptions+=(-quality "$quality")
    voptions+=(-auto-alt-ref "$autoAltRef")
    voptions+=(-lag-in-frames "$lagInFrames")

    if [[ ! -z $crf || ! -z $preset || ! -z $tine || ! -z $dumb ]]; then
        error "This option does't supported with vpx"
        exit 1
    fi

elif [[ "$vcodec" = "libx264" ]]; then
    acodec="libfdk_aac"
    outext="mp4"
    voptions+=(-preset "$preset")
    early_voptions+=(-preset "$preset")

    if [[ ! -z "$tune" ]]; then
        voptions+=(-tune "$tune")
        early_voptions+=(-tune "$tune")
    fi

    voptions+=(-slices "$slices")

    if [[ ! -z "$crf" ]]; then
        voptions+=(-crf "$crf")
        twopass=0
    fi

    if [[ "$dumb" = 1 ]]; then
        voptions+=(-profile:v baseline)
        early_voptions+=(-profile:v baseline)
        voptions+=(-level 3.0)
        early_voptions+=(-level 3.0)
        voptions+=(-pix_fmt yuv420p)
        early_voptions+=(-pix_fmt yuv420p)
    fi

else
    error "Unsupported video codec $vcodec."
    exit 1
fi

if [[ "$acodec" = "libvorbis" ]]; then
    aoptions=(-q:a "$qa")
elif [[ "$acodec" = "libopus" ]]; then
    aoptions=(-vbr on -application audio -strict -2 -b:a "$ba")
elif [[ "$acodec" = "libfdk_aac" ]]; then
    aoptions=(-b:a "$ba")
else
    error "Unsupported audio codec $acodec."
    exit 1
fi

ttable="$("$MKVMERGE_BIN" -i "$file" | grep Track | awk -F' ' 'BEGIN{i=1;t}{if($4!=t){i=1;t=$4};sub(/:/,"",$3);$4=substr($4,1,1);print $4""i"\t"$3;i++}')"

taid=$(grep a$aid <<< "$ttable" | cut -f 2)
tsid=$(grep s$sid <<< "$ttable" | cut -f 2)
aid0=$((aid - 1))
sid0=$((sid - 1))


if [[ "$subs" = "off" ]]; then
    subsarg=""
elif [[ "$subs" = "on" ]]; then
    if [[ "$(filename_extension "$file")" = "ass" ]]; then
        filterarg="ass"
    else
        filterarg="subtitles"
    fi

    escaped="$(printf '%q' "$file")"
    subsarg=",setpts=PTS+$ss/TB,$filterarg=$escaped:si=$sid0,setpts=PTS-STARTPTS"
else
    if [[ "$(filename_extension "$subs")" = "ass" ]]; then
        filterarg="ass"
    else
        filterarg="subtitles"
    fi

    escaped="$(printf '%q' "$subs")"
    subsarg=",setpts=PTS+$ss/TB,$filterarg=$escaped,setpts=PTS-STARTPTS"
fi

TDIR=$(mktemp -d --suffix=_YAWE)

warn "Doing audio encode..."

__ffmpeg \
    -ss "$ss" \
    -t "$t" \
    -i "$file" \
    -y \
    -sn -vn \
    -map "0:a:$aid0" \
    -c:a "$acodec" \
    -ac "$ac" \
    "${aoptions[@]}" \
    "$TDIR/tmp-audio.$outext"


if [[ ! -e "$TDIR/tmp-audio.$outext" ]]; then
    error "Error: $TDIR/tmp-audio.webm not found."
    exit 1
fi
audio_size=$(stat -c%s $TDIR/tmp-audio.$outext)
bv="$(bc <<< "scale=3; tmp=($size * 1024 - $audio_size) / 1024 * 8 / $t; scale=0; tmp / 1")"k
bvoption=()
if [[ -z $crf ]]; then
    bvoption=(-b:v "$bv" -bufsize "$bv")
fi


if [[ $twopass = 1 ]]; then

    warn "Doing video first pass..."

    __ffmpeg \
        -ss "$ss" \
        -t "$t" \
        -i "$file" \
        -y \
        -c:v "$vcodec" \
        -sn -an \
        -vf "scale=$width:-1$fpsarg$subsarg" \
        "${bvoption[@]}" \
        "${early_voptions[@]}" \
        -pass 1 \
        -passlogfile "$TDIR/tmp-2pass" \
        -f rawvideo -f null \
        /dev/null
fi

twopassoption=()
if [[ $twopass = 1 ]]; then
    twopassoption+=(-pass 2)
    twopassoption+=(-passlogfile "$TDIR/tmp-2pass")
fi


warn "Doing video second pass..."

__ffmpeg \
    -ss "$ss" \
    -t "$t" \
    -i "$file" \
    -y \
    -c:v "$vcodec" \
    -sn -an \
    -vf "scale=$width:-1$fpsarg$subsarg" \
    "${bvoption[@]}" \
    "${voptions[@]}" \
    "${twopassoption[@]}" \
    "$TDIR/tmp-video.$outext"

warn "Merging all in 1 file..."

dirtocreate="$(canonize_name "$(basename "$(dirname "$(readlink -f "$file")")")")"
outfilename="$(canonize_name "$file")-$(create_filename "$ss" "$t").$outext"

mkdir -p "$dirtocreate"

__mkvmerge \
    "$TDIR/tmp-video.$outext" \
    "$TDIR/tmp-audio.$outext" \
    -o \
    "$dirtocreate/$outfilename"

rm -rf $TDIR